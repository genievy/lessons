"""
Ограничения доступа к методам класса из вне - это и есть механизм икапсуляции
Если мы не хотим , чтобы прог8раммист имел доступ к некоторым методам класса(не мог изменятЬ, менять значения),
можем сделать эти методы/свойства раззной степени защищенности.
   * attribute (без одного или двух подчеркиваний) - public (публичное св-во)
   * _attribute (c одним подчеркиванием) - protected (служит для обращения внутри класса и во всех его дочерних классах)
   * __attribute (с двумя подчеркиваниями) - privat (cслужит для обращения только внутри класса)

Методы, которые работают с privat-атрибутами и свойствами, называются сеттерами и геттерами. Но, зачем?!:
    Чтобы не нарушить принципы инкапсуляции. Чтобы класс оставался единым целым и не нарушалась работа алггоритмов
    внутри этого класса, а взаимодействие осуществлялось только через публичные методы (разрешенные интерфейсы)..
"""


class Point:
    def __init__(self, x=0, y=0):
        self.__x = x
        self.__y = y

    def set_coords(self, x, y):
        """Можем установить доп проверки перед изменением значений атрибудов: """
        if self.x in (int, float) and self.__y is (int, float):
            self.__x = x
            self.__y = y
        else:
            raise ValueError("Неизвестный тип данных для координат")

    def get_coords(self):
        return self.__x, self.__y


pt = Point(3, 6)
# pt.x = 12
# pt.y = 9
pt.set_coords(15, 5)
# print(pt.__x, pt.__y)
print(pt.get_coords())

