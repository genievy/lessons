                                 *********
    Инкапсуляция - это когда все внутренние манипуляции с данными в классе в идеале не доступны из вне. То есть,
программисты могут обращаться только к некоторым данным и методам класса - разрешенным.
Класс содержит данные(свойства) и методы(действия).
    Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
Инкапсуляция делает некоторые из компонент доступными только внутри класса. Благрдаря этому класс становится единым целым.
    Одиночное подчеркивание в начале имени атрибута говорит о том, что переменная или метод не предназначен
для использования вне методов класса, однако атрибут доступен по этому имени:
>>> class A:
...    def _private(self):
...        print("Это приватный метод!")
...
>>> a = A()
>>> a._private()
Это приватный метод!

    Двойное подчеркивание в начале имени атрибута даёт большую защиту: атрибут становится недоступным по этому имени:
>>> class B:
...     def __private(self):
...         print("Это приватный метод!")
...
>>> b = B()
>>> b.__private()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'B' object has no attribute '__private'

Однако полностью это не защищает, так как атрибут всё равно остаётся доступным под именем _ИмяКласса__ИмяАтрибута:
>>> b._B__private()
Это приватный метод!


                                 *********
    Наследование классов - это то, что позволяет "вынести за скобки" общие свойства и методы для разных классов.
Благодаря механизму наследования  мы можем использовать свойства и методы базовых классов и расширять их функционал.
Наследование подразумевает то, что дочерний класс содержит все атрибуты родительского класса,
при этом некоторые из них могут быть переопределены или добавлены в дочернем.

>>> class Mydict(dict):
...     def get(self, key, default = 0):
...         return dict.get(self, key, default)
...
>>> a = dict(a=1, b=2)
>>> b = Mydict(a=1, b=2)

Класс Mydict ведёт себя так же, как и словарь, за исключением того, что метод get по умолчанию возвращает не None, а 0.


    Полиморфизм - разное поведение одного и того же метода в разных классах.
Например, мы можем сложить два числа, и можем сложить две строки.
При этом получим разный результат, так как числа и строки являются разными классами.
>>> 1 + 1
2
>>> "1" + "1"
'11'

    Полиморфизм - это значит, что мы одним и тем же образом (через единый интерыейс) работать  с разными типами данных.
Есть два типа полиморфизма):
    ad hoc;...
    параметрический:

